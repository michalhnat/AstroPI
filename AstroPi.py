from matplotlib.colors import LinearSegmentedColormap
from datetime import datetime, timedelta
from ephem import readtle, degree
from picamera import PiCamera
from logzero import logger
from pathlib import Path
from PIL import Image

import matplotlib.pyplot as plt
import numpy as np
import time
import sys

#Define a colormap
colors = [(1.0000, 1.0000, 1.0000), (0.9804, 0.9804, 0.9804), (0.9647, 0.9647, 0.9647),
          (0.9490, 0.9490, 0.9490), (0.9333, 0.9333, 0.9333), (0.9137, 0.9137, 0.9137),
          (0.8980, 0.8980, 0.8980), (0.8824, 0.8824, 0.8824), (0.8667, 0.8667, 0.8667),
          (0.8471, 0.8471, 0.8471), (0.8314, 0.8314, 0.8314), (0.8157, 0.8157, 0.8157),
          (0.8000, 0.8000, 0.8000), (0.7843, 0.7843, 0.7843), (0.7647, 0.7647, 0.7647),
          (0.7490, 0.7490, 0.7490), (0.7333, 0.7333, 0.7333), (0.7176, 0.7176, 0.7176),
          (0.6980, 0.6980, 0.6980), (0.6824, 0.6824, 0.6824), (0.6667, 0.6667, 0.6667),
          (0.6510, 0.6510, 0.6510), (0.6314, 0.6314, 0.6314), (0.6157, 0.6157, 0.6157),
          (0.6000, 0.6000, 0.6000), (0.5843, 0.5843, 0.5843), (0.5686, 0.5686, 0.5686),
          (0.5490, 0.5490, 0.5490), (0.5333, 0.5333, 0.5333), (0.5176, 0.5176, 0.5176),
          (0.5020, 0.5020, 0.5020), (0.4824, 0.4824, 0.4824), (0.4667, 0.4667, 0.4667),
          (0.4510, 0.4510, 0.4510), (0.4353, 0.4353, 0.4353), (0.4157, 0.4157, 0.4157),
          (0.4000, 0.4000, 0.4000), (0.3843, 0.3843, 0.3843), (0.3686, 0.3686, 0.3686),
          (0.3529, 0.3529, 0.3529), (0.3333, 0.3333, 0.3333), (0.3176, 0.3176, 0.3176),
          (0.3020, 0.3020, 0.3020), (0.2863, 0.2863, 0.2863), (0.2667, 0.2667, 0.2667),
          (0.2510, 0.2510, 0.2510), (0.2353, 0.2353, 0.2353), (0.2196, 0.2196, 0.2196),
          (0.2039, 0.2039, 0.2039), (0.2196, 0.2196, 0.2196), (0.2353, 0.2353, 0.2353),
          (0.2510, 0.2510, 0.2510), (0.2667, 0.2667, 0.2667), (0.2863, 0.2863, 0.2863),
          (0.3020, 0.3020, 0.3020), (0.3176, 0.3176, 0.3176), (0.3333, 0.3333, 0.3333),
          (0.3529, 0.3529, 0.3529), (0.3686, 0.3686, 0.3686), (0.3843, 0.3843, 0.3843),
          (0.4000, 0.4000, 0.4000), (0.4157, 0.4157, 0.4157), (0.4353, 0.4353, 0.4353),
          (0.4510, 0.4510, 0.4510), (0.4667, 0.4667, 0.4667), (0.4824, 0.4824, 0.4824),
          (0.5020, 0.5020, 0.5020), (0.5176, 0.5176, 0.5176), (0.5333, 0.5333, 0.5333),
          (0.5490, 0.5490, 0.5490), (0.5686, 0.5686, 0.5686), (0.5843, 0.5843, 0.5843),
          (0.6000, 0.6000, 0.6000), (0.6157, 0.6157, 0.6157), (0.6314, 0.6314, 0.6314),
          (0.6510, 0.6510, 0.6510), (0.6667, 0.6667, 0.6667), (0.6824, 0.6824, 0.6824),
          (0.6980, 0.6980, 0.6980), (0.7176, 0.7176, 0.7176), (0.7333, 0.7333, 0.7333),
          (0.7490, 0.7490, 0.7490), (0.7647, 0.7647, 0.7647), (0.7843, 0.7843, 0.7843),
          (0.8000, 0.8000, 0.8000), (0.8157, 0.8157, 0.8157), (0.8314, 0.8314, 0.8314),
          (0.8471, 0.8471, 0.8471), (0.8667, 0.8667, 0.8667), (0.8824, 0.8824, 0.8824),
          (0.8980, 0.8980, 0.8980), (0.9137, 0.9137, 0.9137), (0.9333, 0.9333, 0.9333),
          (0.9490, 0.9490, 0.9490), (0.9647, 0.9647, 0.9647), (0.9804, 0.9804, 0.9804),
          (1.0000, 1.0000, 1.0000), (0.9804, 0.9804, 0.9804), (0.9608, 0.9608, 0.9608),
          (0.9412, 0.9412, 0.9412), (0.9216, 0.9216, 0.9216), (0.9020, 0.9020, 0.9020),
          (0.8824, 0.8824, 0.8824), (0.8627, 0.8627, 0.8627), (0.8431, 0.8431, 0.8431),
          (0.8235, 0.8235, 0.8235), (0.8039, 0.8039, 0.8039), (0.7843, 0.7843, 0.7843),
          (0.7647, 0.7647, 0.7647), (0.7451, 0.7451, 0.7451), (0.7255, 0.7255, 0.7255),
          (0.7059, 0.7059, 0.7059), (0.6863, 0.6863, 0.6863), (0.6667, 0.6667, 0.6667),
          (0.6471, 0.6471, 0.6471), (0.6275, 0.6275, 0.6275), (0.6078, 0.6078, 0.6078),
          (0.5922, 0.5922, 0.5922), (0.5725, 0.5725, 0.5725), (0.5529, 0.5529, 0.5529),
          (0.5333, 0.5333, 0.5333), (0.5137, 0.5137, 0.5137), (0.4941, 0.4941, 0.4941),
          (0.4745, 0.4745, 0.4745), (0.4549, 0.4549, 0.4549), (0.4353, 0.4353, 0.4353),
          (0.4157, 0.4157, 0.4157), (0.3961, 0.3961, 0.3961), (0.3765, 0.3765, 0.3765),
          (0.3569, 0.3569, 0.3569), (0.3373, 0.3373, 0.3373), (0.3176, 0.3176, 0.3176),
          (0.2980, 0.2980, 0.2980), (0.2784, 0.2784, 0.2784), (0.2588, 0.2588, 0.2588),
          (0.2392, 0.2392, 0.2392), (0.2196, 0.2196, 0.2196), (0.2588, 0.2588, 0.3137),
          (0.3020, 0.3020, 0.4118), (0.3412, 0.3412, 0.5098), (0.3843, 0.3843, 0.6078),
          (0.4235, 0.4235, 0.7059), (0.4667, 0.4667, 0.8039), (0.5059, 0.5059, 0.9020),
          (0.5490, 0.5490, 1.0000), (0.5137, 0.5765, 0.9373), (0.4784, 0.6039, 0.8745),
          (0.4431, 0.6314, 0.8118), (0.4118, 0.6588, 0.7490), (0.3765, 0.6863, 0.6863),
          (0.3412, 0.7176, 0.6235), (0.3059, 0.7451, 0.5608), (0.2745, 0.7725, 0.4980),
          (0.2392, 0.8000, 0.4353), (0.2039, 0.8275, 0.3725), (0.1686, 0.8588, 0.3098),
          (0.1373, 0.8863, 0.2471), (0.1020, 0.9137, 0.1843), (0.0667, 0.9412, 0.1216),
          (0.0314, 0.9686, 0.0588), (0.0000, 1.0000, 0.0000), (0.0275, 1.0000, 0.0000),
          (0.0588, 1.0000, 0.0000), (0.0902, 1.0000, 0.0000), (0.1216, 1.0000, 0.0000),
          (0.1529, 1.0000, 0.0000), (0.1843, 1.0000, 0.0000), (0.2157, 1.0000, 0.0000),
          (0.2471, 1.0000, 0.0000), (0.2784, 1.0000, 0.0000), (0.3098, 1.0000, 0.0000),
          (0.3412, 1.0000, 0.0000), (0.3725, 1.0000, 0.0000), (0.4039, 1.0000, 0.0000),
          (0.4353, 1.0000, 0.0000), (0.4667, 1.0000, 0.0000), (0.4980, 1.0000, 0.0000),
          (0.5294, 1.0000, 0.0000), (0.5608, 1.0000, 0.0000), (0.5922, 1.0000, 0.0000),
          (0.6235, 1.0000, 0.0000), (0.6549, 1.0000, 0.0000), (0.6863, 1.0000, 0.0000),
          (0.7176, 1.0000, 0.0000), (0.7490, 1.0000, 0.0000), (0.7804, 1.0000, 0.0000),
          (0.8118, 1.0000, 0.0000), (0.8431, 1.0000, 0.0000), (0.8745, 1.0000, 0.0000),
          (0.9059, 1.0000, 0.0000), (0.9373, 1.0000, 0.0000), (0.9686, 1.0000, 0.0000),
          (1.0000, 1.0000, 0.0000), (1.0000, 0.9765, 0.0000), (1.0000, 0.9569, 0.0000),
          (1.0000, 0.9373, 0.0000), (1.0000, 0.9137, 0.0000), (1.0000, 0.8941, 0.0000),
          (1.0000, 0.8745, 0.0000), (1.0000, 0.8510, 0.0000), (1.0000, 0.8314, 0.0000),
          (1.0000, 0.8118, 0.0000), (1.0000, 0.7882, 0.0000), (1.0000, 0.7686, 0.0000),
          (1.0000, 0.7490, 0.0000), (1.0000, 0.7255, 0.0000), (1.0000, 0.7059, 0.0000),
          (1.0000, 0.6863, 0.0000), (1.0000, 0.6667, 0.0000), (1.0000, 0.6431, 0.0000),
          (1.0000, 0.6235, 0.0000), (1.0000, 0.6039, 0.0000), (1.0000, 0.5804, 0.0000),
          (1.0000, 0.5608, 0.0000), (1.0000, 0.5412, 0.0000), (1.0000, 0.5176, 0.0000),
          (1.0000, 0.4980, 0.0000), (1.0000, 0.4784, 0.0000), (1.0000, 0.4549, 0.0000),
          (1.0000, 0.4353, 0.0000), (1.0000, 0.4157, 0.0000), (1.0000, 0.3922, 0.0000),
          (1.0000, 0.3725, 0.0000), (1.0000, 0.3529, 0.0000), (1.0000, 0.3333, 0.0000),
          (1.0000, 0.3098, 0.0000), (1.0000, 0.2902, 0.0000), (1.0000, 0.2706, 0.0000),
          (1.0000, 0.2471, 0.0000), (1.0000, 0.2275, 0.0000), (1.0000, 0.2078, 0.0000),
          (1.0000, 0.1843, 0.0000), (1.0000, 0.1647, 0.0000), (1.0000, 0.1451, 0.0000),
          (1.0000, 0.1216, 0.0000), (1.0000, 0.1020, 0.0000), (1.0000, 0.0824, 0.0000),
          (1.0000, 0.0588, 0.0000), (1.0000, 0.0392, 0.0000), (1.0000, 0.0196, 0.0000),
          (1.0000, 0.0000, 0.0000), (1.0000, 0.0000, 0.0588), (1.0000, 0.0000, 0.1216),
          (1.0000, 0.0000, 0.1843), (1.0000, 0.0000, 0.2471), (1.0000, 0.0000, 0.3098),
          (1.0000, 0.0000, 0.3725), (1.0000, 0.0000, 0.4353), (1.0000, 0.0000, 0.4980),
          (1.0000, 0.0000, 0.5608), (1.0000, 0.0000, 0.6235), (1.0000, 0.0000, 0.6863),
          (1.0000, 0.0000, 0.7490), (1.0000, 0.0000, 0.8118), (1.0000, 0.0000, 0.8745),
          (1.0000, 0.0000, 0.9373)]

#Initialise the photo counter
counter = 0

image_size_sum = 0

#Set photo directory path
dir_path = Path(__file__).parent.resolve()

#Set up camera
camera = PiCamera()
camera.resolution = (1920, 1080)

#Record the start and current time
start_time = datetime.now()
now_time = datetime.now()

#Return the current latitude and longitude, in degrees using ephem
def iss_latlong():
    #Latest TLE data for ISS location
    iss = readtle("ISS (ZARYA)",
                  "1 25544U 98067A   20316.41516162  .00001589  00000+0  36499-4 0  9995",
                  "2 25544  51.6454 339.9628 0001882  94.8340 265.2864 15.49409479254842")
    #Get the lat/long values from ephem
    iss.compute()
    return f"{iss.sublat / degree} {iss.sublong / degree}"

#Calculate NDVI values
def ndvi_filter(img, path):
    #Split photo into 3 channels
    nir, green, blue = img.split()

    #Convert NIR and blue channel into array using numpy
    array_nir = np.asarray(nir).astype('float64')
    array_blue = np.asarray(blue).astype('float64')

    #Calulate numerator and denominator
    numerator = (array_nir - array_blue)
    denominator = (array_nir + array_blue)

    #Check if the denominator is not equal to 0
    denominator[denominator == 0] = 0.01

    #Divide numerator by denominator
    ndvi = numerator / denominator

    #Define colormap
    fastie_colormap = LinearSegmentedColormap.from_list('colormap', colors)

    #Apply colormap and save photo
    plt.imsave(path, ndvi, vmin=-1.0, vmax=1.0, cmap=fastie_colormap)

#Start the camera
camera.start_preview()

#Start a loop for almost 3 hours(178 minutes)
while (now_time < start_time + timedelta(minutes=178)) and image_size_sum < 3000000000:
    try:
        #Define a path for non NDVI image
        #Add counter, current time and iss position to an image name
        path = "{}/normal_image: {}, time: {}, ISS location: {}.jpg".format(dir_path,
                                                                            counter,
                                                                            datetime.now(),
                                                                            iss_latlong())

        #Define a path for NDVI image
        #Add counter, current time and iss position to an image name
        path_ndvi = "{}/ndvi_image: {}, time: {}, ISS location: {} - ndvi.jpg".format(dir_path,
                                                                                      counter,
                                                                                      datetime.now(),
                                                                                      iss_latlong())

        #Add counter, current time and iss position on image
        camera.annotate_text = "image: {}, time: {}, ISS location: {}.jpg".format(counter,
                                                                                  datetime.now(),
                                                                                  iss_latlong())
        #Take an image and save it
        camera.capture(path)
        #Open the image in order to calulate NDVI and measure image size
        current_image = Image.open(path)

        #Sum up image sizes
        image_size_sum = image_size_sum + sys.getsizeof(current_image)

        #Process NDVI calculation
        ndvi_filter(current_image, path_ndvi)

        # Open the image in order to measure NDVI image size
        current_image = Image.open(path_ndvi)

        # Sum up image sizes
        image_size_sum = image_size_sum + sys.getsizeof(current_image)

        time.sleep(36)

        #Update the current time
        now_time = datetime.now()
        #Increment counter
        counter = counter + 1

    except Exception as e:
        logger.error('{}: {})'.format(e.__class__.__name__, e))

#Credits:
#https://projects.raspberrypi.org/en/projects/code-for-your-astro-pi-mission-space-lab-experiment
#https://publiclab.org/notes/petter_mansson1/04-09-2019/low-cost-ndvi-analysis-using-raspberrypi-and-pinoir